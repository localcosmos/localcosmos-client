/**
 * This file describes a features.json file that is generated by a Local Cosmos App Kit
 */
 import { TaxonomicRestriction } from "../features/BackboneTaxonomy";
import { ImageUrls } from "./Image";

 export enum FeatureType {
  Frontend = 'Frontend',
  BackboneTaxonomy = 'BackboneTaxonomy',
  TaxonProfiles = 'TaxonProfiles',
  NatureGuide = 'NatureGuide',
  GenericForm = 'GenericForm',
  Map = 'Map',
  TemplateContent = 'TemplateContent',
}

export type FeatureBase = {
  uuid: string,
  version: number
  options?: Record<string, any> | null,
  globalOptions?: Record<string, any> | null,
  name: string,
  slug: string,
}

export type Feature = FeatureBase & {
  genericContentType: FeatureType,
  description: string,
  path: string,
  folder: string,
  taxonomicRestrictions?: TaxonomicRestriction[],
}

export type ListFeature = {
  list: Feature[],
  lookup: Record<string, string>
}

export type BackboneTaxonomyFeature = Feature & {
  vernacular: { 
    [locale: string]: string
  },
  vernacularLookup: {
    [locale: string]: string
  }
  alphabet: string,
  slugs: string,
  localizedSlugs: {
    [locale: string]: string
  },
}


export type GenericFormFeature = Feature & {
  isDefault: boolean
}

export type GenericFormListFeature = {
  list: GenericFormFeature[],
  lookup: Record<string, string>,
  default: Record<string, string>,
}

export type TaxonProfilesFeature = Feature & {
  files: string,
  localizedFiles : {
    [locale: string]: string,
  },
  localizedRegistries: {
    [locale: string]: string,
  },
  registry: string,
  search: string,
  navigation: string,
  lookup: Record<string, string>,
  featuredProfiles: string,
}

export type NatureGuideFeature = Feature & {
  startNodeUuid: string,
  startNodeSlug: string,
  imageUrl: ImageUrls,
}

export type TemplateContentSlug = {
  path: string
  templateName: string
}

export type TemplateContentFeature = ListFeature & {
  slugs: Record<string, TemplateContentSlug>,
  assignments: {
    string: Record<string, Record<string, string>>
  },
  navigations: Record<string, Record<string, string>>
}

export type NatureGuideListFeature = {
  list: NatureGuideFeature[],
  lookup: Record<string, string>,
}

export type LocalizedGlossaries = {
  usedTerms: string,
  allTerms: string,
}
export type GlossaryFeature = Feature & {
  localized: Record<string, LocalizedGlossaries>
}

export interface Features {
  slugs: Record<string, string>,
  Frontend: Feature,
  BackboneTaxonomy: BackboneTaxonomyFeature,
  TaxonProfiles: TaxonProfilesFeature,
  NatureGuide?: NatureGuideListFeature,
  GenericForm?: GenericFormListFeature,
  Map?: Feature,
  TemplateContent?: TemplateContentFeature,
  Glossary?: GlossaryFeature,
}