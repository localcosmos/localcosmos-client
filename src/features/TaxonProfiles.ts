/**
 * This file describes the TaxonProfiles files generated by Local cosmos App Kit
 */

 import { TaxonProfilesFeature } from "../types/Features";

import {
  TaxonType,
  LatnameSearchTaxon,
  VernacularSearchTaxon,
  TaxonScientificName
} from './BackboneTaxonomy';
import { ImageUrls } from '../types/Image';
import { MatrixFilter } from './NatureGuide';
import { GenericFormReference } from './GenericForm';


export type VernacularNamesDict = Record<string,string>

export type TaxonImageSet = {
  taxonProfileImages: ImageUrls[],
  nodeImages: ImageUrls[],
  taxonImages: ImageUrls[],
}

export type TaxonProfileReference = TaxonType & {
  vernacularNames: VernacularNamesDict,
  alternativeVernacularNames: VernacularNamesDict,
  images: TaxonImageSet
}

/**
 * localcosmos/features/TaxonProfiles/{uuid}/search.json
 */
export type TaxonProfilesSearchIndex = {
  taxonLatname: {
    [startLetter: string]: LatnameSearchTaxon[]
  },
  vernacular: {
    [locale: string]: {
      [startLetter: string]: VernacularSearchTaxon[]
    }
  }
}

/**
 * localcosmos/features/TaxonProfiles/{uuid}/registry.json
 */
export type TaxonProfilesRegistry = Record<string, TaxonProfileReference>

/**
 * localcosmos/features/TaxonProfiles/vernacular/{locale}.json
 */
export type TaxonProfileList = VernacularSearchTaxon[]



/**
 * The below describes the full Taxon Profile, stored in a separate file for each taxon
 * localcosmos/features/TaxonProfiles/{taxon_source}/{nameUuid}.json
 */


// old
export type TraitValue = {
  encodedSpace: string,
  imageUrl: string,
}

export type Trait = {
  matrixFilter: MatrixFilter,
  values: TraitValue[],
  hasMoreSpecificOccurrence: boolean,
}

export type TaxonText = {
  taxonTextType: string,
  shortText: string,
  shortTextKey: string,
  longText: string,
  longTextKey: string,
}

export type TaxonProfile = TaxonType & {
  vernacular: {
    [locale: string]: string
  },
  allVernacularNames: {
    [locale: string]: string
  },
  nodeNames: string[],
  nodeDecisionRules: any, // todo: unknown
  traits: Trait[],
  texts: TaxonText[],
  images: TaxonImageSet,
  synonyms: TaxonScientificName[],
  gbifNubKey?: string,
  genericForms?: GenericFormReference[],
  templateContents?: object[],
  tags: string[],
}

/**
 * a usable class to query taxonomic profiles
 */
export class TaxonProfiles {

  registry: TaxonProfilesRegistry = {}

  constructor (private taxonProfilesFeature: TaxonProfilesFeature) {}

  async loadRegistry () {
    const response = await fetch(this.taxonProfilesFeature.registry);
    this.registry = await response.json();
  }
}